{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9c90fe8d-3239-4444-8db6-2620fcb6aa78",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(r\"C:\\Users\\abrab\\Downloads\\sample_AAPL.txt\", \"r\") as f:\n",
    "    listItems = f.read().splitlines()   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2a83c5ec-da5a-4d0a-9269-f37760234293",
   "metadata": {},
   "outputs": [],
   "source": [
    "appleprices = listItems\n",
    "for i in range(0, len(listItems)):\n",
    "    appleprices[i] = float(listItems[i]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f5c5bfba-ee6b-42a7-98e7-555fd6659a1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Largest possible profit: $80.85\n"
     ]
    }
   ],
   "source": [
    "def find_max_profit(prices):\n",
    "    # Initialize variables\n",
    "    current_max_val = float('-inf')  # Smallest possible value initially\n",
    "    max_profit_val = 0  # Track the maximum profit\n",
    "\n",
    "    # Loop through the prices in reverse order\n",
    "    for price in reversed(prices):\n",
    "        # Update the current maximum value\n",
    "        current_max_val = max(current_max_val, price)\n",
    "        # Calculate potential profit\n",
    "        potential_profit = current_max_val - price\n",
    "        # Update the maximum profit\n",
    "        max_profit_val = max(potential_profit, max_profit_val)\n",
    "\n",
    "    return max_profit_val\n",
    "\n",
    "\n",
    "# Read the file and process the prices\n",
    "with open(r\"C:\\Users\\abrab\\Downloads\\sample_AAPL.txt\", \"r\") as f:\n",
    "    listItems = f.read().splitlines()\n",
    "\n",
    "# Convert the list of strings to a list of floats\n",
    "appleprices = [float(price) for price in listItems]\n",
    "\n",
    "# Find the largest possible profit\n",
    "largest_profit = find_max_profit(appleprices)\n",
    "\n",
    "# Print the result\n",
    "print(f\"Largest possible profit: ${largest_profit:.2f}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
